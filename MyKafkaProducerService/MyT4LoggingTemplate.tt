<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="D:\MyMentoringTasks\CodegenHelper\bin\Debug\CodegenHelper.dll" #>
<#@ assembly name="D:\MyMentoringTasks\MyKafka.Common\bin\Debug\MyKafka.Common.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="CodegenHelper" #>
<#
Assembly loadedAssembly = Assembly.GetAssembly(typeof(MyKafka.Common.IMyKafkaProducer));bool namespaceInserted = false;
Type[] requiredTypes = loadedAssembly.GetTypes();
foreach(Type T in requiredTypes)
{
if(!T.IsInterface)
{
continue;
}
string className=T.Name.Remove(0,1);
#>

<#if(!namespaceInserted) {#>
using System;
using <#=T.Namespace#>;

namespace MyProxyLoggerNameSpace {
	public class <#=className#>_Proxy {
	<#
	MemberInfo[] members = T.GetMethods();
	foreach(MemberInfo member in members)
	{

	#>
		private readonly <#=T.Name#> _target;

		private static readonly log4net.ILog Logger = log4net.LogManager.GetLogger(typeof(<#=className#>_Proxy));

		public <#=className#>_Proxy(<#=T.Name#> target)
		{
			this._target = target;
		}

		public <#=CodeGenHelper.GenerateMethodDeclaration((MethodInfo)member)#>
		{
			try
            {
                Logger.Info($"{DateTime.Now}: Entering \"<#=member.Name#>(<#=CodeGenHelper.GenerateParametersList((MethodInfo)member, false)#>)\" ");
                <#if(((MethodInfo)member).ReturnType == typeof(void)){#>
				this._target.<#=member.Name#>(<#=CodeGenHelper.GenerateArgumentsList((MethodInfo)member)#>);
				<#}
				else{#>
				return this._target.<#=member.Name#>(<#=CodeGenHelper.GenerateArgumentsList((MethodInfo)member)#>);
				<#}#>
            }
            catch (Exception ex)
            {
                Logger.Info($"{DateTime.Now}: {ex}");
                throw;
            }
            finally
            {
                Logger.Info($"{DateTime.Now}: Finishing \"<#=member.Name#>(<#=CodeGenHelper.GenerateParametersList((MethodInfo)member, false)#>)\" ");
            }
		}
		<#}
		#>
		}
		}
	<#}#>
<#}#>